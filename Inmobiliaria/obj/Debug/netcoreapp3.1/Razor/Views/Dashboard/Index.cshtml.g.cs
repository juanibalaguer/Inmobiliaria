#pragma checksum "C:\Users\balag\source\repos\Inmobiliaria\Inmobiliaria\Views\Dashboard\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5b7c3da1564052c03fed80a3227da483caab21b6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Dashboard_Index), @"mvc.1.0.view", @"/Views/Dashboard/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\balag\source\repos\Inmobiliaria\Inmobiliaria\Views\_ViewImports.cshtml"
using Inmobiliaria;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\balag\source\repos\Inmobiliaria\Inmobiliaria\Views\_ViewImports.cshtml"
using Inmobiliaria.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5b7c3da1564052c03fed80a3227da483caab21b6", @"/Views/Dashboard/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"edf381669dde6995b9201d231bb8643b95e5b7cd", @"/Views/_ViewImports.cshtml")]
    public class Views_Dashboard_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\balag\source\repos\Inmobiliaria\Inmobiliaria\Views\Dashboard\Index.cshtml"
  
    ViewData["Title"] = "Dashboard";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""text-center container"" id=""pagina"">
    <h1 class=""display-4"">Estadísticas</h1>
    <div class=""row"">
        <div class=""col-md-6"">
            <canvas id=""myChart""></canvas>
        </div>
        <div class=""col-md-6"">
            <canvas id=""myChart2""></canvas>
        </div>
    </div>
    <div class=""row"">
        <div class=""col-md-6"">
            <canvas id=""myChart3""></canvas>
        </div>
        <div class=""col-md-6"">

        </div>
    </div>

    <script>


        const cargarDatos = async (direcciones, precios) => {
            //await $.get(""http://localhost:64132/api/inmueblesgratis"").done((res) => {
            await $.get(`");
#nullable restore
#line 29 "C:\Users\balag\source\repos\Inmobiliaria\Inmobiliaria\Views\Dashboard\Index.cshtml"
                    Write(Url.RouteUrl("api"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"/inmueblesgratis`).done((res) => {
                           console.log(res);
                           res.map(inmueble => direcciones.push(inmueble.direccion));
                           res.map(inmueble => precios.push(inmueble.precio));
                           console.log(direcciones);
                           return false;
                       });
        }
        const cargarTipos = async (tipos, count) => {
            //await $.get(""http://localhost:64132/api/inmueblesgratis/tipos"").done((res) => {
            await $.get(`");
#nullable restore
#line 39 "C:\Users\balag\source\repos\Inmobiliaria\Inmobiliaria\Views\Dashboard\Index.cshtml"
                    Write(Url.RouteUrl("api"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"/inmueblesgratis/tipos`).done((res) => {
                console.log(res);
                res.map(inmueble => tipos.push(inmueble.tipo));
                res.map(inmueble => count.push(inmueble.count));
                return false;
            });
        }

        const cargarPromediosSegunAmbientes = async (ambientes, montosPromedio) => {
            //await $.get(""http://localhost:64132/api/inmueblesgratis/tipos"").done((res) => {
            await $.get(`");
#nullable restore
#line 49 "C:\Users\balag\source\repos\Inmobiliaria\Inmobiliaria\Views\Dashboard\Index.cshtml"
                    Write(Url.RouteUrl("api"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"/inmueblesgratis/ambientes`).done((res) => {
                console.log(res);
                res.map(inmueble => ambientes.push(inmueble.ambientes));
                res.map(inmueble => montosPromedio.push(inmueble.montoPromedio));
                return false;
            });
        }

        const cargarGraficos = async () => {
            let direcciones = [];
            let precios = [];

            // Gráfico de barras
            await cargarDatos(direcciones, precios);
            const context = document.getElementById(""myChart"").getContext(""2d"");
            const myChart = new Chart(context, {
                type: 'bar',

                data: {
                    labels: direcciones,
                    datasets: [{
                        label: ""Precios de inmuebles"",
                        data: precios,
                        backgroundColor: ""#ADD8E6"",
                        borderColor: ""#00008B"",
                        borderWidth: 1
                    ");
            WriteLiteral(@"}]
                },
                options: {
                    responsive: true,
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true,
                                callback: function (value, index, values) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
            // Gráfico de torta
            let tipos = [];
            let count = [];
            await cargarTipos(tipos, count);
            const context2 = document.getElementById(""myChart2"").getContext(""2d"");
            const myChart2 = new Chart(context2, {
                type: 'doughnut',
                data: {
                    labels: tipos,
                    datasets: [{
                        label: ""Cantidad de inmuebles según tipo"",
                   ");
            WriteLiteral(@"     data: count,
                        backgroundColor: [""red"", ""blue"", ""green"", ""yellow"", ""orange""],
                    }]
                },
                options: {
                    responsive: true,
                }
            });
            // Gráfico de linea
            let ambientes = [];
            let montosPromedio = [];
            await cargarPromediosSegunAmbientes(ambientes, montosPromedio);
            const context3 = document.getElementById(""myChart3"").getContext(""2d"");
            const myChart3 = new Chart(context3, {
                type: 'line',
                data: {
                    labels: ambientes,
                    datasets: [{
                        label: ""Precio promedio según cantidad de ambientes"",
                        data: montosPromedio,
                        backgroundColor: ""blue"",
                        borderColor: ""green"",
                        fill: false,
                    }]
                },
                op");
            WriteLiteral(@"tions: {
                    responsive: true,
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true,
                                callback: function (value, index, values) {
                                    return '$' + value;
                                }
                            }
                        }]
                    }
                }
            });
        }
        cargarGraficos();
    </script>
</div>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
